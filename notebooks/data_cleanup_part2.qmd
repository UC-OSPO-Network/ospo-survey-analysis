---
title: "Data cleanup, part 2"
---

In this script, I create some cleaner data frames for the more complex questions in our quantitative data set, to minimize the data wrangling at the top of each analysis script.

Input:\
&nbsp;&nbsp;&nbsp;&nbsp;deidentified_no_qual.tsv (produced by data_cleanup.R)\
&nbsp;&nbsp;&nbsp;&nbsp;pii.tsv (produced by data_cleanup.R)\

Output: \
&nbsp;&nbsp;&nbsp;&nbsp;clean_data/\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;challenges_Q9.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contributor_roles_Q4.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contributor_status_Q3.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;future_contributors_Q15.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hosting_services_Q8.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;importance_Q2.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;motivations_Q6.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;project_size_Q5.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;project_types_Q7.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solutions_Q10.tsv\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other_quant.tsv\

There are certain patterns in the way Qualtrics displays questions, so I've organized this into groups of similarly formatted questions.

# Load packages
```{r}
project_root <- here::here() # requires that you be somewhere in the
# project directory (not above it)
suppressMessages(source(file.path(project_root, "scripts/packages.R")))
# functions and objects used across scripts
suppressMessages(source(file.path(project_root, "scripts/utils.R")))
```

# Functions

#### strip_descriptions
- Arguments:
  - `df`: A data frame. Presumably, all entries are strings, and at least one
    column has entries that contain a colon. 
- Details:
  - For each entry in a data frame, strips all text following the colon, if
    there is one.
- Outputs:
  - A new data frame with shortened entries.
- Example:
```
t <- data.frame(
   col1 = c("A:1", "A:1", "", NA, "A:1"),
   col2 = c("B:2", "", "B:2", NA, NA)
)
> t
  col1 col2
1  A:1  B:2
2  A:1     
3       B:2
4 <NA> <NA>
5  A:1 <NA>
> strip_descriptions(t)
     col1 col2
[1,] "A"  "B" 
[2,] "A"  NA  
[3,] NA   "B" 
[4,] NA   NA  
[5,] "A"  NA
```

```{r}
strip_descriptions <- function(df) {
  new_df <- apply(df, MARGIN = c(1, 2), FUN = function(x) {
    strsplit(x, ":")[[1]][1]
  })
  return(new_df)
}
```

#### rename_cols_based_on_entries
- Arguments:
  - `df`: A data frame. Presumably, each column contains only one meaningful value. 
- Details:
  - Rename columns based on the meaningful value in that column. If a column is
    entirely NA or empty strings, function returns "?".
- Outputs:
  - A new data frame with meaningful columns.
- Example:
```
t <- data.frame(
   col1 = c("A", "A", "", NA, "A"),
   col2 = c("B", "", "B", NA, NA)
)
> rename_cols_based_on_entries(t)
     A    B
1    A    B
2    A     
3         B
4 <NA> <NA>
5    A <NA>
> get_unique_vals(t, 1)
[1] "A"
```

```{r}
rename_cols_based_on_entries <- function(df) {
  colnames(df) <- sapply(seq_len(ncol(df)), function(x) {
    get_unique_vals(df, x)
  })
  as.data.frame(df)
}
# Propose a column name based on the entries in that column.
get_unique_vals <- function(df, col_num) {
  unique_vals <- unique(df[, col_num])
  if (length(unique_vals) == 1 && (is.na(unique_vals) | unique_vals == "")) {
    return("?")
  }
  unique_vals <- unique_vals[!(is.na(unique_vals) | unique_vals == "")]
  stopifnot(length(unique_vals) == 1)
  return(unique_vals)
}
```



#### make_df_binary
- Arguments:
  - `df`: A data frame containing strings and/or NAs.
  - `cols`: Optional. A character vector of column names, or numeric indices
    of columns you want to modify.
- Details:
  - Takes a data frame where some entries are meaningful strings and others
    are empty strings or NAs, and converts the meaningful strings to 1s and
    the empty strings and NAs to 0s. Importantly, the string "Non-applicable"
    is not considered a "meaningful string"; these entries are converted to 0s.
- Outputs:
  - A new data frame where all entries are 0s or 1s.
- Example:
```
   Job Improve Tools Customize Network Give back Skills Fun Other
1
2
3      Improve Tools Customize         Give back Skills Fun Other
4
5
6  Job Improve Tools Customize Network Give back Skills Fun Other
7  Job Improve Tools                   Give back Skills
8                                      Give back Skills Fun Other
9
10 Job Improve Tools                   Give back Skills
```
Becomes:
```
   Job Improve Tools Customize Network Give back Skills Fun Other
1    0             0         0       0         0      0   0     0
2    0             0         0       0         0      0   0     0
3    0             1         1       0         1      1   1     1
4    0             0         0       0         0      0   0     0
5    0             0         0       0         0      0   0     0
6    1             1         1       1         1      1   1     1
7    1             1         0       0         1      1   0     0
8    0             0         0       0         1      1   1     1
9    0             0         0       0         0      0   0     0
10   1             1         0       0         1      1   0     0
```

```{r}
make_df_binary <- function(df, cols = NULL) {
  # Determine columns to modify
  if (is.null(cols)) {
    cols_to_modify <- names(df)
  } else if (is.numeric(cols)) {
    cols_to_modify <- names(df)[cols]
  } else if (is.character(cols)) {
    cols_to_modify <- cols
  } else {
    stop(
      "`cols` must be NULL, a character vector of column names, or numeric indices."
    )
  }

  df <- df %>%
    # Convert "Non-applicable" to NA
    mutate(across(
      all_of(cols_to_modify),
      ~ ifelse(.x == "Non-applicable", NA, .x)
    )) %>%
    # Turn empty strings into NAs, and turn non-empty strings into 1s
    mutate(across(all_of(cols_to_modify), ~ ifelse(.x == "", NA, 1))) %>%
    # Convert all NAs to 0s
    mutate(across(all_of(cols_to_modify), ~ ifelse(is.na(.x), 0, .x)))

  return(df)
}
```

#### shorten_long_responses
- Arguments:
  - `df`: A data frame with at least one column containing (presumably long)
     strings. Any column with strings to be replaced must be a character column,
     not a factor.
  - `codes`: A list where keys are the beginning of the long string to be
    replaced, and values are the short string to replace it with.
- Details:
  - Takes a data frame where some entries are long strings, and replaces these
    with pre-specified shorter strings. You don't need to specify the entire
    long string to be replaced; just specify the first part of it, and the function
    will identify matches.
- Outputs:
  - A new data frame where your pre-specified string substitutions have been made.
- Example:
```
hosting_services_18 hosting_services_19 hosting_services_20
A custom website (e.g. a lab website)    In the supplementary components of a journal article                
A custom website (e.g. a lab website)         
                                                                             
A custom website (e.g. a lab website)    In the supplementary components of a journal article
```
Becomes:
```
hosting_services_18 hosting_services_19 hosting_services_20
Custom Website                      Article Supplement
Custom Website

Custom Website                      Article Supplement
```

```{r}
shorten_long_responses <- function(df, codes) {
  new_df <- df
  for (keyword in names(codes)) {
    new_df <- shorten_long_response(new_df, keyword, codes[[keyword]])
  }
  return(new_df)
}
shorten_long_response <- function(df, keyword, replacement) {
  pattern <- paste0("^", stringr::fixed(keyword))
  df <- df %>%
    mutate(across(
      where(is.character),
      ~ ifelse(str_starts(.x, keyword), replacement, .x)
    ))
  return(df)
}
```

# Load data
```{r}
data <- load_qualtrics_data("deidentified_no_qual.tsv")
pii <- load_qualtrics_data("pii.tsv")
```

# Question type 1: No way to tell what columns mean
These are the more annoying Qualtrics outputs. The column names are e.g. `challenges_1`, `challenges_2`, etc., and the entries are not informative, e.g. `Never`, `Infrequently`, etc. Presumably, `challenges_1` corresponds to the first option, `challenges_2` corresponds to the second option, etc., but we still need to check, especially since the column numbering from Qualtrics can be strange. I am manually comparing the answers in this data frame to those in the Qualtrics interface, which shows the whole response, i.e. "Limited time for writing new code", not just "challenges_1". (Data table, under the Data & Analysis tab.)

To be extra confident that I am comparing the same rows between the two tables, I am looking at responses associated with a particular email. After I have visually confirmed the correspondences between the column names and the survey options, I go back to the data frame that does not contain PII. This part must be done manually and interactively, and it only needs to be done once for each question, just to get the corresponding codes. Therefore, I have commented this code out, since I've already done it.

## Clean up challenges columns
```{r}
challenges <- data %>%
  select(
    starts_with("challenges")
  )

head(challenges)
```

**STOP!!!** Manually compare this data frame to the Data table in Qualtrics.
```{r}
# emails <- pii %>%
#   select(starts_with("stay_in_touch_email"))

# t <- cbind(emails, challenges)

#I run this next line repeatedly with different emails,
#to make sure that this person's response to "challenges_1"
#matches their response to "Limited time for writing new code", etc.

# subset(t, startsWith(stay_in_touch_email, "PERSON_EMAIL_HERE"))
```

My assumption above was correct; the options are ordered as expected. Let's rename the columns accordingly.

```{r}
challenge_codes <- c(
  "Coding time" = "challenges_1",
  "Documentation time" = "challenges_2",
  "Managing issues" = "challenges_3",
  "Attracting users" = "challenges_4",
  "Recognition" = "challenges_5",
  "Hiring" = "challenges_6",
  "Security" = "challenges_7",
  "Finding peers" = "challenges_8",
  "Finding mentors" = "challenges_9",
  "Education time" = "challenges_10",
  "Educational resources" = "challenges_11",
  "Legal" = "challenges_12",
  "Finding funding" = "challenges_13",
  "Securing funding" = "challenges_14"
)
challenges <- rename(challenges, any_of(challenge_codes))

head(challenges)
```


## Clean up importance columns
```{r}
importance <- data %>%
  select(
    starts_with("importance_opensrc")
  )
head(importance)
```

**STOP!!!** Manually compare this data frame to the Data table in Qualtrics.
```{r}
# t <- cbind(emails, importance)
# subset(t, startsWith(stay_in_touch_email, "PERSON_EMAIL_HERE"))
```

```{r}
importance_codes <- c(
  "Research" = "importance_opensrc_1",
  "Teaching" = "importance_opensrc_2",
  "Learning" = "importance_opensrc_3",
  "Professional Development" = "importance_opensrc_4",
  "Job" = "importance_opensrc_5"
)
importance <- rename(importance, any_of(importance_codes))
head(importance)
```

## Clean up project size columns
```{r}
size <- data %>%
  select(
    starts_with("project_size")
  )
```

**STOP!!!** Manually compare this data frame to the Data table in Qualtrics.
```{r}
# t <- cbind(emails, size)
# subset(t, startsWith(stay_in_touch_email, "PERSON_EMAIL_HERE"))
```
```{r}
size_codes <- c(
    "Small" = "project_size_1",
    "Medium" = "project_size_2",
    "Large" = "project_size_3"
)
size <- rename(size, any_of(size_codes))
head(size)
```

## Clean up solutions columns
```{r}
solutions <- data %>%
  select(
    starts_with("solution_offerings")
  )
```

**STOP!!!** Manually compare this data frame to the Data table in Qualtrics.
```{r}
# t <- cbind(emails, solutions)
# subset(t, startsWith(stay_in_touch_email, "PERSON_EMAIL_HERE"))
```

```{r}
solution_codes <- c(
  "Computing environments" = "solution_offerings_1",
  "Publicity" = "solution_offerings_2",
  "Containerization" = "solution_offerings_3",
  "Documentation help" = "solution_offerings_4",
  "A learning community" = "solution_offerings_5",
  "Event planning" = "solution_offerings_6",
  "Mentoring programs" = "solution_offerings_7",
  "Education" = "solution_offerings_8",
  "Legal support" = "solution_offerings_9",
  "Industry partnerships" = "solution_offerings_10",
  "Sustainability grants" = "solution_offerings_11",
  "Help finding funding" = "solution_offerings_12"
)
solutions <- rename(solutions, any_of(solution_codes))
head(solutions)
```

## Clean up contributor status columns

```{r}
status <- data %>% select(
  starts_with("contributor_status")
)
```

**STOP!!!** Manually compare this data frame to the Data table in Qualtrics.
```{r}
# t <- cbind(emails, status)
# subset(t, startsWith(stay_in_touch_email, "PERSON_EMAIL_HERE"))
```
```{r}
status_codes <- c(
  "Past" = "contributor_status_1",
  "Future" = "contributor_status_2"
)
status <- rename(status, any_of(status_codes))
head(status)
```


# Question type 2: Rename columns based on entries
In these cases, we can tell what the column means because the entries are either the response itself or an empty string. These are essentially dummy variables with yes/no outcomes. We don't need to manually match the data frame to the responses in the Qualtrics interface. Even better, we don't need a list of codes.

For contributor_roles_Q4 and project_types_Q7, we included a colon in the survey response, so I am using my strip_descriptions function to strip everything after the colon because that seems easier than typing out a list of codes.

## Clean up contributor roles columns
```{r}
roles <- data %>% select(starts_with("contributor_role"))

roles <- strip_descriptions(roles)

# Change the column names to more useful labels
roles <- rename_cols_based_on_entries(roles)

# Shorten this one long role
names(roles) <- gsub(
  "^Other.*",
  "Other",
  names(roles)
)

roles <- make_df_binary(roles)
head(roles)
```


## Clean up project types columns
```{r}
types <- data %>% select(starts_with("project_types"))

types <- strip_descriptions(types)

# Change the column names to more useful labels
types <- rename_cols_based_on_entries(types)

# Shorten this one long role
names(types) <- gsub(
  "^Other.*",
  "Other",
  names(types)
)

types <- make_df_binary(types)
head(types)
```

For these next questions, the responses were often rather long and complex, so I am shortening their names with shorten_long_responses.

## Clean up future_contributors columns
```{r}
future <- data %>%
  select(
    starts_with("future_contributors")
  )

future_codes <- c(
  "Accessible conferences" = "Conferences and hackathons",
  "Access to free" = "Computing environments",
  "Educational materials" = "Educational materials",
  "An open source discussion group" = "A learning community",
  "Dedicated grants" = "Sustainability grants",
  "Networking opportunities" = "Industry networking",
  "Job" = "Academic job opportunities",
  "Other " = "Other",
  "Assistance identifying" = "Help finding funding",
  "Legal" = "Legal support",
  "A mentor" = "Mentoring programs"
)

future <- shorten_long_responses(future, future_codes)
future <- rename_cols_based_on_entries(future)
future <- make_df_binary(future)

head(future)
```

## Clean up hosting_services columns
```{r}
hosting <- data %>%
  select(
    starts_with("hosting_services")
  )

hosting_codes <- c(
  "Other" = "Other",
  "OSF" = "OSF",
  "A custom website" = "Custom Website",
  "In the supplementary" = "Article Supplement"
)
hosting <- shorten_long_responses(hosting, hosting_codes)

hosting <- rename_cols_based_on_entries(hosting)
# Manual inspection reveals no one selected Vivli
names(hosting) <- gsub("\\?", "Vivli", names(hosting))
hosting <- make_df_binary(hosting)
head(hosting)
```

## Clean up motivations columns
```{r}
motivations <- data %>%
  select(
    starts_with("motivations")
  )

codenames <- c(
  "Developing open-source" = "Job",
  "To improve the tools" = "Improve Tools",
  "To customize existing" = "Customize",
  "To build a network" = "Network",
  "To give back to" = "Give back",
  "To improve my skills" = "Skills",
  "Because it's fun" = "Fun",
  "Other " = "Other"
)


motivations <- shorten_long_responses(motivations, codenames)
motivations <- rename_cols_based_on_entries(motivations)
motivations <- make_df_binary(motivations)
head(motivations)
```

# Question type 3: Simple multiple choice

These are questions with just a single column, where the entries indicate which choice the respondent selected. I could just save them as-is, but I think it will make my analysis scripts tidier to replace the longer responses with codes here.

```{r}
other_quant <- data %>%
  select(
    starts_with(
      c(
        "campus",
        "favorite_solution",
        "field_of_study",
        "job_category",
        "staff_categories"
      )
    )
  )
  head(other_quant)
```

```{r}
solution_codes2 <- c(
  "Access to free" = "Computing environments",
  "Assistance promoting your" = "Publicity",
  "Assistance creating" = "Containerization",
  "Assistance writing" = "Documentation help",
  "An open source discussion" = "A learning community",
  "Assistance with event" = "Event planning",
  "A mentor" = "Mentoring programs",
  "Educational materials" = "Education",
  "Legal and licensing" = "Legal support",
  "Assistance building industry" = "Industry partnerships",
  "Dedicated grants" = "Sustainability grants",
  "Assistance identifying potential" = "Help finding funding"
)
other_quant <- shorten_long_responses(other_quant, solution_codes2)
```

```{r}
field_codes <- c(
  "Mathematical and computational sciences" = "Math and CS"
)
other_quant <- shorten_long_responses(other_quant, field_codes)
```

```{r}
job_codes <- c(
  "Other research staff" = "Other research staff"
)
other_quant <- shorten_long_responses(other_quant, job_codes)
```

```{r}
staff_codes <- c(
  "Academic and Research Support" = "Academic and Research Support",
  "Other \\(Please specify" = "Other",
  "Finance" = "Finance"
)
other_quant <- shorten_long_responses(other_quant, staff_codes)
head(other_quant)
```

# Check row numbers and save
We want to make sure that all data frames have the same number of rows. Because each row corresponds to a participant, it's critical that the row numbers match, so that we can compare responses from the same participant on different questions. I'm putting all my data frames in one list, and then applying functions to each data frame in the list.

```{r}
dfs <- list(
  "challenges_Q9.tsv" = challenges,
  "contributor_roles_Q4.tsv" = roles,
  "contributor_status_Q3.tsv" = status,
  "future_contributors_Q15.tsv" = future,
  "hosting_services_Q8.tsv" = hosting,
  "importance_Q2.tsv" = importance,
  "motivations_Q6.tsv" = motivations,
  "project_size_Q5.tsv" = size,
  "project_types_Q7.tsv" = types,
  "solutions_Q10.tsv" = solutions,
  "other_quant.tsv" = other_quant
)
sapply(dfs, function(current_df) nrow(current_df))
```

Good! Same number of rows. Now let's save them to files in a folder. We will use the `write_df_to_file` function, which is in `scripts/utils.R`.
```{r}
output_dir <- file.path(Sys.getenv("DATA_PATH"), "clean_data")

if (!dir.exists(output_dir)) {
  dir.create(output_dir)
}

# invisible() suppresses noisy output text to the terminal
invisible(
  sapply(seq(length(dfs)), function(i) {
    write_df_to_file(
      dfs[[i]],
      file.path("clean_data", names(dfs[i]))
    )
  })
)
```


```{r}
sessionInfo()
```