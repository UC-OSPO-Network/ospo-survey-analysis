---
title: "Importance of open source"
---

# Overview
This script creates bar plots from question 2 on the survey, which is about the perceived importance of open source for different job categories and different tasks. My favorite plot is the one in the [final section](#Percent-more-than-moderately-important), "Percent more than moderately important".

# Import packages and utilities
```{r}
project_root <- here::here() # requires that you be somewhere in the
# project directory (not above it)
# packages
suppressMessages(source(file.path(project_root, "scripts/packages.R")))
# functions and objects used across scripts
suppressMessages(source(file.path(project_root, "scripts/utils.R")))
```

# Define functions

#### get_percent_more_than_moderate

- Arguments:
  - `df`: A data frame with a column named `importance_level`. Should contain
    only rows that you want to count. Extra columns are okay.
- Details:
  - A simple function to count what percent of rows in a data frame have an
    `importance_level` of more than `Moderately important`. Checks that there
    are no extra rows with an unexpected value in the importance_level column.
- Outputs:
  - A scalar value representing the percentage of respondents who selected an
    `importance_level` of more than `Moderately important`, rounded to 2 decimal
    places.
```{r}
get_percent_more_than_moderate <- function(df) {
  # check that df has the required column
  if (!"importance_level" %in% names(df)) {
    stop("`df` must have a column named 'importance_level'.")
  }

  high_importance_cats <- c(
    "Very important",
    "Important"
  )
  low_importance_cats <- c(
    "Moderately important",
    "Slightly important",
    "Not at all important"
  )

  n_high_rows <- nrow(df %>% filter(importance_level %in% high_importance_cats))
  n_low_rows <- nrow(df %>% filter(importance_level %in% low_importance_cats))
  total <- nrow(df)
  if (n_high_rows + n_low_rows != total) {
    stop("`df` has at least one unexpected value in 'importance_level'.")
  }
  pct <- round(n_high_rows / total * 100, 2)
  return(pct)
}
```

# Load data
```{r}
importance <- load_qualtrics_data("clean_data/importance_Q2.tsv")
other_quant <- load_qualtrics_data("clean_data/other_quant.tsv")
```

# Wrangle data
Let's extract the columns we care about.
```{r}
importance_and_job <- cbind(importance, other_quant$job)
names(importance_and_job)[length(names(importance_and_job))] <- "job_category"
```

Remove all rows that contain an empty string in any column. Since both
questions were mandatory, I'm actually only removing people who never saw the
demographic questions.
```{r}
importance_and_job <- exclude_empty_rows(importance_and_job, strict = TRUE)
```

Let's reshape the data from wide to long format.
```{r}
long_data <- importance_and_job %>%
  pivot_longer(
    cols = -job_category,
    names_to = "importance_area",
    values_to = "importance_level"
  )
```

Reorder factor levels for plotting.
```{r}
long_data$importance_level <- factor(
  long_data$importance_level,
  levels = c(
    "Very important",
    "Important",
    "Moderately important",
    "Slightly important",
    "Not at all important",
    "Non-applicable"
  ),
  ordered = TRUE
)
long_data
```

# Bar plots

## Simple bar plot for teachers
Now let's start making some bar plots. Let's start by making a bar plot showing
how teachers rate the importance of open source for their teaching. Since we
didn't ask people "Do you teach?", and since there was a "Non-applicable"
option, we will simply assume that if they gave an answer for the "Teaching"
option, they must be a teacher.
```{r}
teaching <- long_data %>%
  filter(
    importance_area == "Teaching"
  ) %>%
  filter(
    importance_level != "Non-applicable"
  )

# For our bar plot, we only care about how many times each 'importance level' was selected.
teaching_to_plot <- teaching %>% select(-c(job_category, importance_area))

teaching_to_plot <- teaching_to_plot %>%
  count(importance_level, name = "Counts")

# By sheer luck, the columns are already ordered by response rates.
teaching_to_plot
```

Now let's make that bar chart using a function that lives in my utilities script (`scripts/utils.R`).
```{r, fig.width=18, fig.height=12}
basic_bar_chart(
  teaching_to_plot,
  x_var = "importance_level",
  y_var = "Counts",
  title = "Perceived Importance of Open Source for Teaching",
  ylabel = "Number of Respondents (Teachers Only)",
  show_bar_labels = TRUE
)
```

Save the plot using a function that lives in my utilities script (`scripts/utils.R`).
```{r}
#save_plot("importance_teachers.tiff", 8, 5)
```


## Grouped bar plot for researchers
Now let's look at researchers, and the importance categories that apply to all
researchers. The importance categories again are:\
Research\
Teaching --> Does not apply\
Learning\
Professional Development\
Job (For non-research staff) --> Does not apply\

So we'll make a bar plot with just those three categories that apply to all
researchers. As with teachers above, we will assume that if they didn't select
"Non-applicable", they must be a researcher.

The `grouped_bar_chart` function, like the `basic_bar_chart` function, lives in my utility script.
```{r fig.width=10, fig.height=5}
research_learning_pd <- long_data %>%
  filter(
    importance_area == "Research" |
      importance_area == "Learning" |
      importance_area == "Professional Development"
  ) %>%
  filter(importance_level != "Non-applicable")

grouped_bar_chart(
  df = research_learning_pd,
  x_var = "importance_level",
  fill_var = "importance_area",
  title = "Perceived Importance of Open Source among Researchers"
)
```

```{r}
#save_plot("importance_researchers.tiff", 10, 5)
```


## Grouped bar plot for non-research staff
This is very similar to what I did above, except the three applicable categories have changed.
```{r fig.width=10, fig.height=5}
job_learning_pd <- long_data %>%
  filter(
    importance_area == "Job" |
      importance_area == "Learning" |
      importance_area == "Professional Development"
  ) %>%
  filter(job_category == "Non-research Staff") %>%
  filter(importance_level != "Non-applicable")

grouped_bar_chart(
  df = job_learning_pd,
  x_var = "importance_level",
  fill_var = "importance_area",
  title = "Perceived Importance of Open Source among Non-research Staff"
)
```

```{r}
#save_plot("importance_nrstaff.tiff", 10, 5)
```


# Percent more than moderately important

Renata suggested I try to combine all these data into one figure that summarizes the question at a glance. Here's my attempt.

I think a useful "statistic" is the percent of a particular group that said OS is more than moderately important for a particular area of work. Let's make a dataframe with those percentages. I'd ultimately like to turn this into a bar plot where the color or design of the bars corresponds to the five job categories, and the x-axis shows four groups that I think are most relevant: teachers, researchers, non-research staff, and students. However, not all these groups were explicit survey categories, and not all 5 importance areas apply to all groups, so we'll need to do a fair amount of data wrangling.

To start, let's get the percent of teachers who said teaching was more than moderately important.
```{r}
teaching <- long_data %>%
  filter(
    importance_area == "Teaching"
  ) %>%
  filter(
    importance_level != "Non-applicable"
  )

more_than_mod <- data.frame(
  job_category = "Teachers",
  importance_area = "Teaching",
  pct = get_percent_more_than_moderate(teaching)
)

more_than_mod
```

The code is basically the same for researchers and researching: as with teaching, we will assume that anyone who gave an answer for research (i.e, didn't select "N/A") is a researcher.
```{r}
research <- long_data %>%
  filter(
    importance_area == "Research"
  ) %>%
  filter(
    importance_level != "Non-applicable"
  )

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Researchers",
    "Research",
    get_percent_more_than_moderate(research)
  )
)
```

The code for non-research staff and "Job" is slightly different. Our intention was that only non-research staff would answer this question, but there were some people who answered this but did not select "non-research staff" as their job category. So let's just ensure that we're only looking at responses from non-research staff by filtering for non-research staff using the job_category column.
```{r}
nrstaff <- long_data %>%
  filter(
    job_category == "Non-research Staff"
  ) %>%
  filter(
    importance_area == "Job"
  ) %>%
  filter(
    importance_level != "Non-applicable"
  )

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Non-research Staff",
    "Job",
    get_percent_more_than_moderate(nrstaff)
  )
)
```

Next, I want to look at two importance areas, Learning and Professional Development, for all four job categories: Teachers, Researchers, Non-research staff, and Students. We'll have to determine teachers and researchers based on who answered the teaching question and who answered the research question, respectively. Meanwhile, for "Student", we'll have to combine grad students and undergrads into one group. 

Let's keep rows from teachers, but keep columns for Learning and Professional Development. Then we change the job_category column to "Teacher".
```{r}
teachers_learn_pd <- importance_and_job %>%
  filter(Teaching != "Non-applicable") %>%
  select(Learning, `Professional Development`, job_category)

teachers_learn_pd$job_category <- "Teacher"
head(teachers_learn_pd)
```

Now we can add two more rows to `more_than_mod`.
```{r}
teachers_learning <- teachers_learn_pd %>%
  select(Learning, job_category) %>%
  #unlikely but you never know
  filter(Learning != "Non-applicable") %>%
  # Change the column name because our function expects it
  rename(importance_level = Learning)

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Teachers",
    "Learning",
    get_percent_more_than_moderate(teachers_learning)
  )
)

teachers_pd <- teachers_learn_pd %>%
  select(`Professional Development`, job_category) %>%
  #unlikely but you never know
  filter(`Professional Development` != "Non-applicable") %>%
  # Change the column name because our function expects it
  rename(importance_level = `Professional Development`)

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Teachers",
    "Professional Development",
    get_percent_more_than_moderate(teachers_pd)
  )
)
more_than_mod
```

And let's do the same for researchers.
```{r}
researchers_learn_pd <- importance_and_job %>%
  filter(Research != "Non-applicable") %>%
  select(Learning, `Professional Development`, job_category)

researchers_learn_pd$job_category <- "Researcher"

researchers_learning <- researchers_learn_pd %>%
  select(Learning, job_category) %>%
  #unlikely but you never know
  filter(Learning != "Non-applicable") %>%
  # Change the column name because our function expects it
  rename(importance_level = Learning)

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Researchers",
    "Learning",
    get_percent_more_than_moderate(researchers_learning)
  )
)

researchers_pd <- researchers_learn_pd %>%
  select(`Professional Development`, job_category) %>%
  #unlikely but you never know
  filter(`Professional Development` != "Non-applicable") %>%
  # Change the column name because our function expects it
  rename(importance_level = `Professional Development`)

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Researchers",
    "Professional Development",
    get_percent_more_than_moderate(researchers_pd)
  )
)
more_than_mod
```

Now get percentages for non-research staff. This is straightforward since it was a survey category.

```{r}
nrstaff_learn_pd <- importance_and_job %>%
  filter(job_category == "Non-research Staff") %>%
  select(Learning, `Professional Development`, job_category)

nrstaff_learning <- nrstaff_learn_pd %>%
  select(Learning, job_category) %>%
  #unlikely but you never know
  filter(Learning != "Non-applicable") %>%
  # Change the column name because our function expects it
  rename(importance_level = Learning)

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Non-research Staff",
    "Learning",
    get_percent_more_than_moderate(nrstaff_learning)
  )
)

nrstaff_pd <- nrstaff_learn_pd %>%
  select(`Professional Development`, job_category) %>%
  #unlikely but you never know
  filter(`Professional Development` != "Non-applicable") %>%
  # Change the column name because our function expects it
  rename(importance_level = `Professional Development`)

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Non-research Staff",
    "Professional Development",
    get_percent_more_than_moderate(nrstaff_pd)
  )
)
```

Finally, let's get students.
```{r}
students_learn_pd <- importance_and_job %>%
  filter(job_category == "Undergraduate" | job_category == "Grad Student") %>%
  select(Learning, `Professional Development`, job_category)

students_learn_pd$job_category <- "Student"

students_learning <- students_learn_pd %>%
  select(Learning, job_category) %>%
  #unlikely but you never know
  filter(Learning != "Non-applicable") %>%
  # Change the column name because our function expects it
  rename(importance_level = Learning)

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Students",
    "Learning",
    get_percent_more_than_moderate(students_learning)
  )
)

students_pd <- students_learn_pd %>%
  select(`Professional Development`, job_category) %>%
  #unlikely but you never know
  filter(`Professional Development` != "Non-applicable") %>%
  # Change the column name because our function expects it
  rename(importance_level = `Professional Development`)

more_than_mod <- rbind(
  more_than_mod,
  list(
    "Students",
    "Professional Development",
    get_percent_more_than_moderate(students_pd)
  )
)
```

FINALLY, let's plot it! 

```{r}
more_than_mod$job_category <- gsub(
  "Non-research Staff",
  "Non-research\nStaff",
  more_than_mod$job_category
)

more_than_mod$job_category <- factor(
  more_than_mod$job_category,
  levels = c(
    "Teachers",
    "Researchers",
    "Non-research\nStaff",
    "Students"
  )
)

more_than_mod$importance_area <- factor(
  more_than_mod$importance_area,
  levels = c(
    "Learning",
    "Professional Development",
    "Teaching",
    "Research",
    "Job"
  )
)
```

I'm not using my `grouped_bar_chart` function in `scripts/utils.R` because I have pre-computed the bar heights, and that function counts rows. Since I'm currently only creating this kind of bar chart once, I'm not bothering to create a new function (or incorporate this option into the `grouped_bar_chart` function).


```{r fig.width=16, fig.height=8}

p <- ggplot(
  more_than_mod,
  aes(
    x = job_category,
    y = pct,
    fill = importance_area
  )
) +
  geom_col(position = position_dodge(width = 0.8), width = 0.7) +
  geom_hline(yintercept = 80, linetype = "dashed", color = "black") +
  ggtitle("Perceived Importance of Open Source\nfor Different Kinds of Work") +
  labs(
    y = "Percent of Respondents Who Said OS\nIs More than Moderately Important"
  ) +
  scale_y_continuous(labels = function(x) paste0(x, "%")) +
  coord_cartesian(ylim = c(50, 100)) +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = 24),
    axis.text.x = element_text(
      angle = 60,
      vjust = 0.6,
      size = 22,
      margin = margin(t = 8)
    ),
    axis.text.y = element_text(
      size = 22,
      margin = margin(l = 8)
    ),
    axis.ticks.x = element_blank(),
    legend.title = element_blank(),
    legend.text = element_text(size = 20),
    panel.background = element_blank(),
    plot.title = element_text(hjust = 0.5, size = 24),
    plot.margin = unit(c(0.3, 0.3, 0.3, 0.3), "cm"),
    panel.grid = element_line(linetype = "solid", color = "gray90")
  ) +
  #https://sronpersonalpages.nl/~pault/
  scale_fill_manual(
    values = c(
      '#4477AA',
      '#EE6677',
      '#228833',
      '#CCBB44',
      '#66CCEE'
    )
  )

p

```

```{r}
save_plot("importance_all_pct.tiff", 12, 8, p=p)
```

# Session Info

```{r}
sessionInfo()
```